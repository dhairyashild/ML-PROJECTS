# STEP 4: MODEL PREPARATION
# Stages: 4.1 Train-Test Split, 4.2 Feature Scaling, 4.3 Baseline Model, 4.4 Save Processed Data
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load engineered data from Step 3
data = pd.read_csv('engineered_data.csv')

#### 4.1 TRAIN-TEST SPLIT (MOST CRITICAL STEP)
print("âœ“ 4.1 TRAIN-TEST SPLIT")
# BEST PRACTICE: Always split before any scaling or transformation
# REAL-TIME: Use 80-20 split for large datasets, 70-30 for smaller ones
# AVOID: Splitting after scaling - causes data leakage

X = data.drop('MedHouseVal', axis=1)  # All features except target
y = data['MedHouseVal']               # Target variable

X_train, X_test, y_train, y_test = train_test_split(
    X, y, 
    test_size=0.2,       # 80% training, 20% testing
    random_state=42,     # Reproducibility
    shuffle=True         # Shuffle data before splitting
)

print(f"Training set: {X_train.shape[0]} samples")
print(f"Testing set: {X_test.shape[0]} samples")
print(f"Features: {X_train.shape[1]}")

#### 4.2 FEATURE SCALING (PREPARE FOR ALGORITHMS)
print("\nâœ“ 4.2 FEATURE SCALING")
# BEST PRACTICE: Fit scaler on training data only, transform both sets
# REAL-TIME: Use StandardScaler for normally distributed data
# AVOID: Fitting scaler on entire dataset - major data leakage

# Identify numerical features (exclude target and already encoded features)
numerical_features = X_train.select_dtypes(include=[np.number]).columns

# Initialize and fit scaler on training data
scaler = StandardScaler()
X_train_scaled = X_train.copy()
X_test_scaled = X_test.copy()

X_train_scaled[numerical_features] = scaler.fit_transform(X_train[numerical_features])
X_test_scaled[numerical_features] = scaler.transform(X_test[numerical_features])

print(f"Scaled {len(numerical_features)} numerical features")
print("Scaler fitted on training data only (prevents data leakage)")

#### 4.3 BASELINE MODEL (ESTABLISH PERFORMANCE BENCHMARK)
print("\nâœ“ 4.3 BASELINE MODEL")
# BEST PRACTICE: Start with simple model to establish benchmark
# REAL-TIME: RandomForest works well out-of-box for quick baseline
# AVOID: Using complex models before establishing baseline

# Train baseline model
baseline_model = RandomForestRegressor(
    n_estimators=100,
    random_state=42,
    n_jobs=-1  # Use all CPU cores
)

baseline_model.fit(X_train_scaled, y_train)

# Predict and evaluate
y_pred = baseline_model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Baseline Model Performance:")
print(f"RMSE: {rmse:.4f}")
print(f"RÂ² Score: {r2:.4f}")

#### 4.4 SAVE PROCESSED DATA (REPRODUCIBILITY)
print("\nâœ“ 4.4 SAVE PROCESSED DATA")
# Save processed datasets for model training
X_train_scaled.to_csv('X_train_scaled.csv', index=False)
X_test_scaled.to_csv('X_test_scaled.csv', index=False)
y_train.to_csv('y_train.csv', index=False)
y_test.to_csv('y_test.csv', index=False)

print("ðŸ’¾ Processed data saved for Step 5: Model Training")
print("X_train_scaled.csv, X_test_scaled.csv, y_train.csv, y_test.csv")

#### READY FOR STEP 5: MODEL TRAINING & HYPERPARAMETER TUNING
# NEXT: Try different algorithms, hyperparameter optimization, and model selection
